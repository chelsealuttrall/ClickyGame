{"version":3,"sources":["components/img/Blot1.jpg","components/img/Blot2.jpg","components/img/Blot3.jpg","components/img/Blot4.jpg","components/img/Blot5.jpg","components/img/Blot6.jpg","components/img/Blot7.jpg","components/img/Blot8.jpg","components/img/Blot9.jpg","components/NavBar.js","components/ImgCards.js","components/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","Brand","className","size","React","Component","ImgCards","Container","this","props","cards","map","picArray","Card","Body","Image","index","src","image","id","onClick","checkForDuplicate","Scoreboard","Col","score","topScore","shuffle","require","Blot1","clicked","Blot2","Blot3","Blot4","Blot5","Blot6","Blot7","Blot8","Blot9","App","state","selectedCards","console","log","includes","setState","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd58a52e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Blot1.11c3857f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot2.896ed59e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot3.0de331bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot4.f6d5bbf3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot5.f5024377.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot6.0b838438.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot7.3a071c80.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot8.6e80ea02.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blot9.34295a98.jpg\";","import React from \"react\";\nimport { Navbar} from \"react-bootstrap\";\n//import BnWDot from \"../assets/img/BnWDot.png\";\nimport \"./NavBar.css\";\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <Navbar bg=\"light\" variant=\"light\">\n        <Navbar.Brand>\n          \n          <h1 className=\"text\"\n            size=\"60\"\n          >Rorschach's Clicky Game\n          </h1>\n          \n          \n        </Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Container, Card } from \"react-bootstrap\";\nimport Image from \"react-bootstrap/Image\";\n\n//import Blot19 from \"./img/Blot19.jpg\";\nimport \"./ImgCards.css\";\n\n\nclass ImgCards extends React.Component {\n \n\n  // addingToClickedArray = (clickedID) => {\n  // this.setState({\n  //   clickedArrray: this.state.clickedArray.concat([clickedID]),\n  //   shuffled: shuffle(this.state.shuffled),\n  // })};\n\n  render() {\n   \n      return (\n        <>\n        \n        <br></br>\n        <Container className=\"cards\">\n          {this.props.cards.map((picArray) => (\n            <Card className=\"card\">\n              <Card.Body>\n                <Image\n                  index=\"\"\n                  src={picArray.image}\n                  className=\"img\"\n                  id={picArray.id}\n                  // onClick={this.handleClick}\n                  // onClick={(event) => this.handleClick(event)}\n                  onClick={() => {this.props.checkForDuplicate(picArray)}}\n\n                  // count={currentScore}\n                />\n              </Card.Body>\n            </Card>\n          ))}\n        </Container>\n        </>\n      );\n    };\n  \n}\nexport default ImgCards;\n","import React, {Component} from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\n//import BnWDot from \"../assets/img/BnWDot.png\";\nimport \"./Scoreboard.css\";\nimport \"./ImgCards\";;\n\nclass Scoreboard extends Component {\n  render() {\n    return (\n      <Container className=\"flexy\">\n        <Col className=\"column\">\n          <h1 className=\"padding\">Current Score:</h1>\n          <h1 className=\"padding\">{this.props.score}</h1>\n        </Col>\n        <hr></hr>\n        <Col className=\"column\">\n          <h1 className=\"padding\">Top Score:</h1>\n          <h1 className=\"padding\">{this.props.topScore}</h1>\n        </Col>\n      </Container>\n    );\n  }\n}\nexport default Scoreboard;\n\n// const [clickedArray, setClickedArray] = useState([])\n\n//   setTopScore(() => {\n//     if (score > topscore) {\n//       let newTopScore = topscore + 1;\n//       topscore = newTopScore;\n//     this.setTopScore({topscore=newTopScore})\n//   }});\n//   let topScoreBump = (score) => {\n//     if (score > topscore) {\n//       let newTopScore = topscore + 1;\n//       topscore = newTopScore;\n//     }\n//     return topscore;\n//   };\n// };\n// let score = props.state.value;\n\n// if (score > topscore){\n//   let currentTopscore = sessionStorage.getItem(\"topscore\");\n//   currentTopscore = topscore(currentTopscore)+1;\n// }else {sessionStorage.topscore}\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport { Container } from \"react-bootstrap\";\nimport ImgCards from \"./components/ImgCards\";\nimport Blot1 from \"./components/img/Blot1.jpg\";\nimport Blot2 from \"./components/img/Blot2.jpg\";\nimport Blot3 from \"./components/img/Blot3.jpg\";\nimport Blot4 from \"./components/img/Blot4.jpg\";\nimport Blot5 from \"./components/img/Blot5.jpg\";\nimport Blot6 from \"./components/img/Blot6.jpg\";\nimport Blot7 from \"./components/img/Blot7.jpg\";\nimport Blot8 from \"./components/img/Blot8.jpg\";\nimport Blot9 from \"./components/img/Blot9.jpg\";\nimport Scoreboard from \"./components/Scoreboard.js\";\nvar shuffle = require(\"shuffle-array\");\n//import Randomizer from \"./Randomizer\";\n\nlet picArray = [\n  {\n    id: 1,\n    image: Blot1,\n    clicked: false,\n  },\n  {\n    id: 2,\n    image: Blot2,\n    clicked: false,\n  },\n  {\n    id: 3,\n    image: Blot3,\n    clicked: false,\n  },\n  {\n    id: 4,\n    image: Blot4,\n    clicked: false,\n  },\n  {\n    id: 5,\n    image: Blot5,\n    clicked: false,\n  },\n  {\n    id: 6,\n    image: Blot6,\n    clicked: false,\n  },\n  {\n    id: 7,\n    image: Blot7,\n    clicked: false,\n  },\n  {\n    id: 8,\n    image: Blot8,\n    clicked: false,\n  },\n  {\n    id: 9,\n    image: Blot9,\n    clicked: false,\n  },\n];\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    cards: shuffle(picArray),\n    selectedCards: []\n  };\n\n  // on componentDidMount\n  // call game setup\n\n  // gameSetup\n  // create the array of cards with random images and points\n\n  checkForDuplicate = (image) => {\n    console.log(image.id);\n    let selectedCards = this.state.selectedCards;\n    if (selectedCards.includes(image.id)) {\n      console.log(\"you're terrible!\");\n      this.setState({score:0});\n    } else { \n      selectedCards.push(image.id);\n      this.setState({\n        selectedCards: selectedCards, \n        cards: shuffle(this.state.cards), \n        score: this.state.score+1\n      }, () => {\n        this.setState({\n          topScore: (this.state.topScore < this.state.score) ? this.state.score : this.state.topScore\n        })\n      });\n      console.log(\"bueno clicko\")};\n\n\n\n  };\n  // if card is in selectedCards, you lose\n  // Add to selectedCards\n  //  if selectedCards.length == card.length , you win\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        {/* <Scoreboard></Scoreboard> */}\n        <Scoreboard score={this.state.score} topScore={this.state.topScore}></Scoreboard>\n        <h3 className=\"objective\">\n          Objective: Click on each Rorschach Tile. Do not repeat. Try to click\n          on each tile without repeating one that you've already clicked. If you\n          re-click a tile, your game will start over. You want to achieve the\n          top score.\n        </h3>\n\n        <Container>\n          <ImgCards cards = {this.state.cards} checkForDuplicate = {this.checkForDuplicate} />\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// incrementCount(this.state.props) {\n//   this.setState(() => {\n//     // Important: read `state` instead of `this.state` when updating.\n//     return props.count + 1 ;\n//   });\n// }\n\n//   //top populate\n//   topScorePopulate = (...props) => {\n\n//     if (props.badClick) {\n//       if (this.state.currentScore > this.state.topScore) {\n//         this.state.topScore = this.state.currentScore;\n//         //score wipe out/ \"badClick\"\n//         this.state.currentScore = 0;\n\n//       } else {\n//    //     score wipe out/ \"badClick\"\n//         this.state.currentScore = 0;\n//       }\n//     }\n//   };\n//   //score increment/ \"goodClick\"\n//   scoreIncrement = (...props) => {\n//     if (props.goodClick) {\n//       let currentScore = this.state.currentScore;\n//       currentScore = currentScore + 1;\n//       this.state.currentScore = currentScore;\n\n//       return currentScore\n//     }\n//   };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}